package com.example.log1;

import android.Manifest;
import android.content.pm.PackageManager;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import java.io.File;
import java.io.FileWriter;
import java.util.Timer;
import java.util.TimerTask;

public class MainActivity extends AppCompatActivity implements SensorEventListener {

    Button but1;
    Button but2;
    TextView etext;
    TextView valueAX;
    TextView valueAY;
    TextView valueAZ;
    TextView valueGX;
    TextView valueGY;
    TextView valueGZ;

    long period = 10;
    byte count = 0;
    int time = 0;

    Timer timer;

    float[] valuesAccel = new float[3];
    float[] valuesGyros = new float[3];
    String format(float val) { return String.format("%1$.3f", val); }

    SensorManager sensorManager;
    Sensor sensorAccel;
    Sensor sensorGyros;

    private static final String fileName = "LoggerData.txt";
    private static File sdFile = null;

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.layoutport);

        while(!isStoragePermissionGranted()){}

        but1 = (Button) findViewById(R.id.button1);
        but2 = (Button) findViewById(R.id.button2);
        etext = (TextView) findViewById(R.id.etext1);
        valueAX = (TextView) findViewById(R.id.valueAX);
        valueAY = (TextView) findViewById(R.id.valueAY);
        valueAZ = (TextView) findViewById(R.id.valueAZ);
        valueGX = (TextView) findViewById(R.id.valueGX);
        valueGY = (TextView) findViewById(R.id.valueGY);
        valueGZ = (TextView) findViewById(R.id.valueGZ);

        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        sensorAccel = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        sensorGyros = sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);

        try {
            sdFile = new File(Environment.getExternalStorageDirectory().toString() + "/" + fileName);
            sdFile.createNewFile();
            sdFile.delete();
            try(FileWriter writer = new FileWriter(sdFile, true))
            {
                writer.write("time" + "\t"
                        + "AX" + "\t"
                        + "AY" + "\t"
                        + "AZ" + "\t"
                        + "GX" + "\t"
                        + "GY" + "\t"
                        + "GZ" + "\n");
                writer.flush();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        but1.setOnClickListener(onClickListener);
        but2.setOnClickListener(onClickListener);
    }

    private boolean isStoragePermissionGranted() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
                return true;
            } else {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
                return false;
            }
        }
        else {
            return true;
        }
    }

    View.OnClickListener onClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()){
                case (R.id.button1):
                    if (TextUtils.isEmpty(etext.getText().toString())) {
                        return;
                    } else period = Long.parseLong(etext.getText().toString());

                    break;
                case (R.id.button2):
                    if (count == 0) {
                        but2.setText("stop");
                        count = 1;
                        onResume();
                    }
                    else if (count == 1) {
                        but2.setText("start");
                        count = 0;
                        onPause();
                    }

                    break;
            }
        }
    };

    protected void onResume() {
        super.onResume();
        sensorManager.registerListener(this, sensorAccel, SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(this, sensorGyros, SensorManager.SENSOR_DELAY_NORMAL);

        if (count == 0) {
            return;
        }

        timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                runOnUiThread(new Runnable() {
                    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
                    @Override
                    public void run() {
                        info();
                    }
                });
            }
        };

        timer.schedule(task, 0, period);
    }

    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
    void info(){
        valueAX.setText(String.valueOf(format(valuesAccel[0])));
        valueAY.setText(String.valueOf(format(valuesAccel[1])));
        valueAZ.setText(String.valueOf(format(valuesAccel[2])));

        valueGX.setText(String.valueOf(format(valuesGyros[0])));
        valueGY.setText(String.valueOf(format(valuesGyros[1])));
        valueGZ.setText(String.valueOf(format(valuesGyros[2])));

        time += period;
        try(FileWriter writer = new FileWriter(sdFile, true))
        {
            writer.write(String.valueOf(time) + "\t"
                    + String.valueOf(format(valuesAccel[0])) + "\t"
                    + String.valueOf(format(valuesAccel[1])) + "\t"
                    + String.valueOf(format(valuesAccel[2])) + "\t"
                    + String.valueOf(format(valuesGyros[0])) + "\t"
                    + String.valueOf(format(valuesGyros[1])) + "\t"
                    + String.valueOf(format(valuesGyros[2])) + "\n");
            writer.flush();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    protected void onPause() {
        super.onPause();
        sensorManager.unregisterListener(this);
        timer.cancel();
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        if(event.sensor.getType() == Sensor.TYPE_ACCELEROMETER){
            for (int i = 0; i < 3; i++) { valuesAccel[i] = event.values[i]; }
        }
        else if (event.sensor.getType() == Sensor.TYPE_GYROSCOPE) {
            for (int i = 0; i < 3; i++) { valuesGyros[i] = event.values[i]; }
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
    }
}